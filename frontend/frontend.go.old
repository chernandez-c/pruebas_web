// frontend.go
package main

import (
    "html/template"
    "log"
    "net/http"
	"encoding/json"
)

var tmpl = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Go HTMX Frontend</title>
    <script src="https://unpkg.com/htmx.org@1.9.2"></script>
</head>
<body>
    <h1>Frontend with HTMX</h1>
    <button hx-get="/fetch-data" hx-target="#result">Fetch Data</button>
    <div id="result"></div>
</body>
</html>
`

var resultTmpl = `
<p>Message: {{.Message}}</p>
<p>Count: {{.Count}}</p>
`

type Response struct {
    Message string
    Count   int
}

func main() {
    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        t := template.Must(template.New("index").Parse(tmpl))
        t.Execute(w, nil)
    })

    http.HandleFunc("/fetch-data", func(w http.ResponseWriter, r *http.Request) {
        // Call the backend API
        resp, err := http.Get("http://localhost:8081/api/data")
        if err != nil {
            http.Error(w, "Failed to fetch data", http.StatusInternalServerError)
            return
        }
        defer resp.Body.Close()

        // Parse the backend response
        var data Response
        if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
            http.Error(w, "Failed to parse data", http.StatusInternalServerError)
            return
        }

        // Render the response into the HTML
        t := template.Must(template.New("result").Parse(resultTmpl))
        t.Execute(w, data)
    })

    log.Println("Frontend server running on http://localhost:8080")
    log.Fatal(http.ListenAndServe(":8080", nil))
}
